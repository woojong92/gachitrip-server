type CreateBoardResponse {
  ok: Boolean!
  error: String
}

type Mutation {
  CreateBoard(title: String!, text: String!, files: [String!]!): CreateBoardResponse!
  CheckValidEmail(email: String!): CheckValidEmailResponse!
  CompleteEmailVerification(key: String!, email: String!): CompleteEmailVerificationResponse!
  CompletePhoneVerification(phoneNumber: String!, key: String!): CompletePhoneVerificationResponse!
  EmailSignIn(email: String!, password: String!): EmailSignInResponse!
  EmailSignUp(firstName: String, lastName: String, username: String!, email: String!, password: String!, birth: String!, nationality: String!, gender: String!): EmailSignUpResponse!
  FacebookConnect(firstName: String!, lastName: String!, email: String, fbId: String!): FacebookConnectResponse!
  RequestEmailVerification(email: String!): RequestEmailVerificationResponse!
  StartPhoneVerification(phoneNumber: String!): StartPhoneVerificationResponse!
  UpdateMyProfile(firstName: String, lastName: String, email: String, password: String, profilePhoto: String, age: Int): UpdateMyProfileResponse!
}

type Query {
  ReadBoard(id: String!): Board!
  GetMyProfile: GetMyProfileResponse!
  user: User
}

type Board {
  id: Int!
  title: String!
  text: String!
  files: [BoardFile]
  author: User!
  likes: [BoardLike]
  comments: [BoardComment]
  createdAt: String!
  updatedAt: String
}

type BoardComment {
  id: Int!
  text: String!
  user: User!
  board: Board!
  createdAt: String!
  updatedAt: String
}

type BoardFile {
  id: Int!
  url: String!
  board: Board!
  createdAt: String!
  updatedAt: String
}

type BoardLike {
  id: Int!
  user: User!
  Board: Board!
  createdAt: String!
  updatedAt: String
}

type Chat {
  id: Int!
  messages: [Message]!
  participants: [User]!
  createdAt: String!
  updatedAt: String
}

type Message {
  id: Int!
  text: String!
  chat: Chat!
  user: User!
  createdAt: String!
  updatedAt: String
}

type Ride {
  id: Int!
  status: String!
  pickUpAddress: String!
  pickUpLat: Float!
  pickUpLng: Float!
  dropOffAddress: String!
  dropOffLat: Float!
  dropOffLng: Float!
  price: Float!
  distance: String!
  driver: User!
  passagnger: User!
  createdAt: String!
  updatedAt: String
}

type CheckValidEmailResponse {
  ok: Boolean!
  error: String
}

type CompleteEmailVerificationResponse {
  ok: Boolean!
  error: String
}

type CompletePhoneVerificationResponse {
  ok: Boolean!
  error: String
  token: String
}

type EmailSignInResponse {
  ok: Boolean!
  error: String
  token: String
}

type EmailSignUpResponse {
  ok: Boolean!
  error: String
}

type FacebookConnectResponse {
  ok: Boolean!
  error: String
  token: String
}

type GetMyProfileResponse {
  ok: Boolean!
  error: String
  user: User
}

type RequestEmailVerificationResponse {
  ok: Boolean!
  error: String
}

type User {
  id: Int!
  avatar: String
  username: String!
  firstName: String
  lastName: String
  email: String!
  password: String!
  birth: String!
  gender: String!
  nationality: String!
  following: [User]
  followers: [User]
  boards: [Board]
  boardLikes: [BoardLike]
  boardComments: [BoardComment]
  withs: [With]
  withLikes: [WithLike]
  withComments: [WithComment]
  chats: [Chat]
  createdAt: String!
  updatedAt: String
}

type StartPhoneVerificationResponse {
  ok: Boolean!
  error: String
}

type UpdateMyProfileResponse {
  ok: Boolean!
  error: String
}

type Verification {
  id: Int!
  target: String!
  payload: String!
  key: String!
  verified: Boolean!
  createdAt: String!
  updatedAt: String!
}

type With {
  id: Int!
  title: String!
  text: String!
  files: [WithFile]
  author: User
  isUnisex: Boolean
  unisex: Int
  male: Int
  female: Int
  dayTrip: Boolean
  dateFrom: String
  dateTo: String
  abroad: Boolean!
  address: String
  latitude: Float
  longitude: Float
  isCompeted: Boolean
  likes: [WithLike]
  comments: [WithComment]
  createdAt: String!
  updatedAt: String
}

type WithComment {
  id: Int!
  text: String!
  user: User!
  with: With!
  createdAt: String!
  updatedAt: String
}

type WithFile {
  id: Int!
  url: String!
  with: With!
  createdAt: String!
  updatedAt: String
}

type WithLike {
  id: Int!
  user: User!
  with: With!
  createdAt: String
  updatedAt: String
}
